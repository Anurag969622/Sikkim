import React, { useState } from 'react';
import { Download, FileText, Code, Table, Copy, Check } from 'lucide-react';
import { OSINTResult } from '../types/osint';

interface ExportFunctionalityProps {
  result: OSINTResult;
  aiReport: string;
}

export default function ExportFunctionality({ result, aiReport }: ExportFunctionalityProps) {
  const [exportFormat, setExportFormat] = useState<'markdown' | 'json' | 'csv'>('markdown');
  const [copied, setCopied] = useState(false);
  const [exporting, setExporting] = useState(false);

  const generateMarkdownReport = (): string => {
    return `# OSINT Analysis Report

## Executive Summary
- **Target:** \`${result.target}\`
- **Type:** ${result.inputType.toUpperCase()}
- **Scan Depth:** ${result.scanDepth.toUpperCase()}
- **Threat Score:** ${result.threatScore}/100
- **Generated:** ${new Date(result.timestamp).toLocaleString()}

## AI Assessment
${aiReport}

## Technical Data
${JSON.stringify(result.data, null, 2)}

## Risk Factors
- Breach History: ${result.riskFactors.breachHistory}/25
- Infrastructure Age: ${result.riskFactors.infrastructureAge}/15
- Geographic Risk: ${result.riskFactors.geographicRisk}/20
- Blacklist Status: ${result.riskFactors.blacklistStatus}/20
- Security Scan Results: ${result.riskFactors.securityScanResults}/20

## Timeline Events
${result.timeline?.map(event => `- **${event.date}**: ${event.title} (${event.confidence} confidence)`).join('\n') || 'No timeline events'}

---
*Report generated by Advanced OSINT Toolkit*
`;
  };

  const generateJSONReport = (): string => {
    return JSON.stringify({
      metadata: {
        generatedAt: new Date().toISOString(),
        version: '2.0',
        toolkit: 'Advanced OSINT Toolkit'
      },
      target: result.target,
      inputType: result.inputType,
      scanDepth: result.scanDepth,
      threatScore: result.threatScore,
      riskFactors: result.riskFactors,
      data: result.data,
      timeline: result.timeline,
      geolocation: result.geolocation,
      darkWeb: result.darkWeb,
      mitreAttack: result.mitreAttack,
      similarTargets: result.similarTargets,
      aiAssessment: aiReport
    }, null, 2);
  };

  const generateCSVReport = (): string => {
    const rows = [
      ['Field', 'Value'],
      ['Target', result.target],
      ['Input Type', result.inputType],
      ['Scan Depth', result.scanDepth],
      ['Threat Score', result.threatScore.toString()],
      ['Generated At', new Date(result.timestamp).toISOString()],
      ['Breach History Score', result.riskFactors.breachHistory.toString()],
      ['Infrastructure Age Score', result.riskFactors.infrastructureAge.toString()],
      ['Geographic Risk Score', result.riskFactors.geographicRisk.toString()],
      ['Blacklist Status Score', result.riskFactors.blacklistStatus.toString()],
      ['Security Scan Score', result.riskFactors.securityScanResults.toString()]
    ];

    return rows.map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
  };

  const getReportContent = (): string => {
    switch (exportFormat) {
      case 'markdown': return generateMarkdownReport();
      case 'json': return generateJSONReport();
      case 'csv': return generateCSVReport();
      default: return generateMarkdownReport();
    }
  };

  const getFileExtension = (): string => {
    switch (exportFormat) {
      case 'markdown': return 'md';
      case 'json': return 'json';
      case 'csv': return 'csv';
      default: return 'md';
    }
  };

  const getMimeType = (): string => {
    switch (exportFormat) {
      case 'markdown': return 'text/markdown';
      case 'json': return 'application/json';
      case 'csv': return 'text/csv';
      default: return 'text/markdown';
    }
  };

  const handleDownload = async () => {
    setExporting(true);
    
    try {
      const content = getReportContent();
      const blob = new Blob([content], { type: getMimeType() });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `osint-report-${result.target}-${new Date().toISOString().split('T')[0]}.${getFileExtension()}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setExporting(false);
    }
  };

  const handleCopy = async () => {
    try {
      const content = getReportContent();
      await navigator.clipboard.writeText(content);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Copy failed:', error);
    }
  };

  const formatOptions = [
    { 
      value: 'markdown', 
      label: 'Markdown', 
      icon: FileText, 
      description: 'Human-readable format with formatting',
      color: 'text-blue-400'
    },
    { 
      value: 'json', 
      label: 'JSON', 
      icon: Code, 
      description: 'Machine-readable structured data',
      color: 'text-green-400'
    },
    { 
      value: 'csv', 
      label: 'CSV', 
      icon: Table, 
      description: 'Spreadsheet-compatible tabular data',
      color: 'text-orange-400'
    }
  ];

  return (
    <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-green-400/20 rounded-lg">
          <Download className="text-green-400" size={24} />
        </div>
        <div>
          <h3 className="text-xl font-semibold text-white">Export Report</h3>
          <p className="text-gray-400 text-sm">Download or copy report in multiple formats</p>
        </div>
      </div>

      {/* Format Selection */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        {formatOptions.map((option) => {
          const Icon = option.icon;
          return (
            <button
              key={option.value}
              onClick={() => setExportFormat(option.value as any)}
              className={`p-4 rounded-lg border text-left transition-all duration-200 transform hover:scale-105 ${
                exportFormat === option.value
                  ? 'bg-gray-700 border-gray-500 text-white shadow-lg'
                  : 'bg-gray-700/50 border-gray-600 text-gray-300 hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center gap-3 mb-2">
                <Icon size={20} className={option.color} />
                <div className="font-medium">{option.label}</div>
                {exportFormat === option.value && (
                  <Check size={16} className="ml-auto text-green-400" />
                )}
              </div>
              <div className="text-xs opacity-75">{option.description}</div>
            </button>
          );
        })}
      </div>

      {/* Preview */}
      <div className="mb-6">
        <h4 className="text-white font-medium mb-3">Preview</h4>
        <div className="bg-gray-900 rounded-lg p-4 border border-gray-600 max-h-64 overflow-y-auto">
          <pre className="text-gray-300 text-xs whitespace-pre-wrap font-mono">
            {getReportContent().substring(0, 1000)}
            {getReportContent().length > 1000 && '...'}
          </pre>
        </div>
      </div>

      {/* Export Actions */}
      <div className="flex gap-3">
        <button
          onClick={handleDownload}
          disabled={exporting}
          className="flex items-center gap-2 px-6 py-3 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-all duration-200 hover:scale-105 disabled:hover:scale-100"
        >
          {exporting ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
              <span>Exporting...</span>
            </>
          ) : (
            <>
              <Download size={16} />
              <span>Download {formatOptions.find(f => f.value === exportFormat)?.label}</span>
            </>
          )}
        </button>

        <button
          onClick={handleCopy}
          className="flex items-center gap-2 px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-all duration-200 hover:scale-105"
        >
          {copied ? (
            <>
              <Check size={16} className="text-green-400" />
              <span>Copied!</span>
            </>
          ) : (
            <>
              <Copy size={16} />
              <span>Copy to Clipboard</span>
            </>
          )}
        </button>
      </div>

      {/* Integration Hooks */}
      <div className="mt-6 p-4 bg-purple-900/20 border border-purple-400/30 rounded-lg">
        <div className="flex items-center gap-2 mb-2">
          <Code size={16} className="text-purple-400" />
          <span className="text-purple-400 font-medium">Integration Ready</span>
        </div>
        <p className="text-gray-300 text-sm">
          Exported data includes structured metadata for integration with SIEM platforms, 
          threat intelligence feeds, and security orchestration tools.
        </p>
      </div>
    </div>
  );
}